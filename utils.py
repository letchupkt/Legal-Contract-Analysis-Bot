from reportlab.lib.pagesizes import A4, letter
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, black, white
from reportlab.lib import colors
import io
from typing import List, Dict
import html
import textwrap

def create_pdf_report(summary: str, overall_score: float, risky_clauses: List[Dict]) -> bytes:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                          rightMargin=72, leftMargin=72, 
                          topMargin=72, bottomMargin=18)
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=HexColor('#2E3440'),
        alignment=1  # Center alignment
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=HexColor('#2E3440'),
        leftIndent=0
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        textColor=HexColor('#3B4252'),
        leftIndent=0,
        rightIndent=0
    )
    
    risk_style = ParagraphStyle(
        'RiskStyle',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=8,
        textColor=HexColor('#2E3440'),
        leftIndent=20
    )
    
    # Build story
    story = []
    
    # Title
    story.append(Paragraph("‚öñÔ∏è Legal Contract Risk Analysis Report", title_style))
    story.append(Spacer(1, 20))
    
    # Overall Risk Score with colored background
    risk_color = "#D32F2F" if overall_score > 70 else "#F57C00" if overall_score > 40 else "#388E3C"
    risk_table_data = [
        ["Overall Risk Score", f"{overall_score}%"]
    ]
    risk_table = Table(risk_table_data, colWidths=[3*inch, 2*inch])
    risk_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), HexColor(risk_color)),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 14),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.white)
    ]))
    story.append(risk_table)
    story.append(Spacer(1, 30))
    
    # Contract Summary
    story.append(Paragraph("üìã Contract Summary", heading_style))
    
    # Wrap summary text properly
    wrapped_summary = textwrap.fill(summary, width=80)
    story.append(Paragraph(wrapped_summary.replace('\n', '<br/>'), body_style))
    story.append(Spacer(1, 20))
    
    # Risk Analysis
    story.append(Paragraph("üîç Detailed Risk Analysis", heading_style))
    
    for i, clause in enumerate(risky_clauses[:8], 1):  
        # Risk level styling
        risk_level = clause.get('risk', 'Medium')
        risk_color_text = "#D32F2F" if risk_level == "High" else "#F57C00" if risk_level == "Medium" else "#388E3C"
        
        # Clause header
        clause_header = f"<b>Clause {i} - {risk_level} Risk</b>"
        story.append(Paragraph(clause_header, ParagraphStyle(
            'ClauseHeader',
            parent=risk_style,
            fontSize=12,
            textColor=HexColor(risk_color_text),
            spaceAfter=6,
            leftIndent=0
        )))
        
        # Clause text (truncated)
        clause_text = clause.get('clause', '')[:200] + "..." if len(clause.get('clause', '')) > 200 else clause.get('clause', '')
        story.append(Paragraph(f"<b>Text:</b> {clause_text}", risk_style))
        
        # Explanation
        explanation = clause.get('explanation', '')[:300] + "..." if len(clause.get('explanation', '')) > 300 else clause.get('explanation', '')
        story.append(Paragraph(f"<b>üìù Analysis:</b> {explanation}", risk_style))
        
        # Suggestion
        suggestion = clause.get('suggestion', '')[:250] + "..." if len(clause.get('suggestion', '')) > 250 else clause.get('suggestion', '')
        story.append(Paragraph(f"<b>üí° Recommendation:</b> {suggestion}", risk_style))
        
        story.append(Spacer(1, 15))
    
    # Footer
    story.append(Spacer(1, 30))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        textColor=HexColor('#5E81AC'),
        alignment=1
    )
    story.append(Paragraph("Generated by LegalRiskBot - AI-Powered Contract Analysis", footer_style))
    story.append(Paragraph("‚ö†Ô∏è This analysis is for informational purposes only. Consult legal professionals for specific advice.", footer_style))
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    return buffer.read()

def highlight_text_html(full_text: str, clause_annotations: List[Dict]) -> str:
 
    html_out = html.escape(full_text)
    

    sorted_clauses = sorted(clause_annotations, key=lambda x: len(x['clause']), reverse=True)
    
    for ann in sorted_clauses:
        snippet = ann['clause'].strip()
        if len(snippet) < 10:
            continue
            
        
        risk_level = ann['risk']
        if risk_level == "Low":
            bg_color = "#2E7D32"  
            text_color = "white"
        elif risk_level == "Medium":
            bg_color = "#F57C00" 
            text_color = "white"
        else: 
            bg_color = "#C62828"  
            text_color = "white"
        
        safe_snip = html.escape(snippet)
        replacement = f'<span style="background-color: {bg_color}; color: {text_color}; padding: 3px 6px; border-radius: 3px; font-weight: bold;">{safe_snip}</span>'
        
        html_out = html_out.replace(safe_snip, replacement, 1)
    
    # Simple container
    return f'<div style="white-space: pre-wrap; font-family: monospace; background-color: #1e1e1e; color: white; padding: 20px; border-radius: 5px; line-height: 1.5;">{html_out}</div>'
